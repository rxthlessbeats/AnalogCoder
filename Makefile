help:  ## Show help
	@grep -E '^[.a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'

clean: ## Clean autogenerated files
	rm -rf dist
	rm -rf .cache
	rm -rf ./docs/Scripts ./docs/Examples ./docs/Reference
	find . -type f -name "*.DS_Store" -ls -delete
	find . | grep -E "(__pycache__|\.pyc|\.pyo)" | xargs rm -rf
	find . | grep -E ".pytest_cache" | xargs rm -rf
	find . | grep -E ".ipynb_checkpoints" | xargs rm -rf
	git fetch --prune
	git gc --prune=now --aggressive
	rm -rf tmp
	rm -rf .cache
	rm -rf .github/reports
	rm -rf .pytest_cache
	rm -rf .coverage
	rm -rf .github/coverage_html_report

setup: ## Setup the project
	git config --global http.sslVerify false
	pip install poetry
	poetry install --sync --only main
	pre-commit install-hooks
	pre-commit install

rye-install:  ## Install Rye on your system
	export https_proxy=http://mtkdrone01.mediatek.inc:23984 && \
	curl -sSf https://rye.astral.sh/get | RYE_INSTALL_OPTION="--yes" RYE_TOOLCHAIN_VERSION="3.10" bash
	cp ./docker/mirror/config.toml ~/.rye/
	@echo 'Installed Rye, please re-open your bash terminal or zsh terminal.'

uv-install:  ## Install uv on your system
	export https_proxy=http://mtkdrone01.mediatek.inc:23984 && \
	curl -LsSf https://astral.sh/uv/install.sh | sh
	@echo 'export PATH="$$HOME/.local/bin:$$PATH"' >> ~/.bashrc
	@echo 'Installed uv, please re-open your bash terminal or zsh terminal.'

poetry-add: ## Add all packages from requirements.txt to poetry
	cat requirements.txt >> build_poetry.txt
	sed -i '/^#/d;/^$$/d' build_poetry.txt
	pip install poetry
	poetry add $$(cat build_poetry.txt)
	rm build_poetry.txt

codegpt-install:  ## Install Codegpt
	export https_proxy=http://mtkdrone01.mediatek.inc:23984 && \
	wget https://github.com/appleboy/CodeGPT/releases/download/v0.14.2/CodeGPT-0.14.2-linux-amd64
	chmod +x CodeGPT-0.14.2-linux-amd64
	mv CodeGPT-0.14.2-linux-amd64 ~/.local/bin/codegpt
	mkdir -p ~/.config/codegpt
	cp ./docker/mirror/.codegpt.yaml ~/.config/codegpt/.codegpt.yaml
	@echo 'export PATH="$$HOME/.local/bin:$$PATH"' >> ~/.bashrc
	@echo 'Installed CodeGPT, please re-open your bash terminal or zsh terminal.'

kubectl-install:  ## Install kubectl on your system
	@export https_proxy=http://mtkdrone01.mediatek.inc:23984; \
	curl -LO "https://dl.k8s.io/release/$$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"; \
	chmod +x kubectl; \
	cp kubectl $${HOME}/.local/bin; \
	kubectl version --client

nvm-install:  # Install nvm
	@export https_proxy=http://mtkdrone01.mediatek.inc:23984; \
	curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
	@echo 'export PATH="$$HOME/.local/bin:$$PATH"' >> ~/.bashrc
	@echo 'export NVM_DIR="$$HOME/.nvm"' >> ~/.bashrc
	@echo '[ -s "$$NVM_DIR/nvm.sh" ] && \. "$$NVM_DIR/nvm.sh"' >> ~/.bashrc
	@echo '[ -s "$$NVM_DIR/bash_completion" ] && \. "$$NVM_DIR/bash_completion"' >> ~/.bashrc
	@echo 'Installed nvm, please re-open your bash terminal or zsh terminal.'

format: ## Run pre-commit hooks
	pre-commit run -a

test: ## Run all tests
	pytest

submodule-init: ## Install and update all submodules
	git submodule update --recursive --init

submodule-update:  # Update all submodules
	git submodule update --recursive --remote

gen-docs:  ## Generate documentation
	rm -rf ./docs/Scripts ./docs/Examples ./docs/Reference ./docs/Notebooks
	python ./scripts/gen_docs.py --source scripts --output ./docs/Scripts --exclude .venv gen_docs
	python ./scripts/gen_docs.py --source examples --output ./docs/Examples --exclude .venv gen_docs
	python ./scripts/gen_docs.py --source ./src/mtkllm --output ./docs/Reference --exclude .venv gen_docs
	python ./scripts/gen_docs.py --source ./notebooks --output ./docs/Notebooks --exclude .venv gen_docs

deploy:  ## Deploy the service to MKE
	KUBECONFIG=deployment/k8s/docs.yaml kubectl delete deployment srv-tma-sdk --namespace srv-tma --ignore-not-found
	KUBECONFIG=deployment/k8s/docs.yaml kubectl delete service srv-tma-sdk-service --namespace srv-tma --ignore-not-found
	KUBECONFIG=deployment/k8s/docs.yaml kubectl apply -k deployment/mtkllm --namespace srv-tma
	KUBECONFIG=deployment/k8s/docs.yaml kubectl get all --namespace srv-tma
